import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { 
  QrCode,\n  Users,\n  Gift,\n  TrendingUp,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Calendar,\n  DollarSign,\n  Trash2,\n  Plus\n} from 'lucide-react';
import { api } from '../lib/api';\nimport { formatCurrency } from '../lib/utils';\n\ninterface QRToken {\n  id: number;\n  userId: number;\n  tokenType: 'coupon' | 'mileage';\n  referenceId: number | null;\n  isUsed: boolean;\n  usedAt: string | null;\n  usedBusinessId: number | null;\n  expiresAt: string;\n  createdAt: string;\n  user?: {\n    id: number;\n    name: string;\n    email: string;\n  };\n  business?: {\n    id: number;\n    businessName: string;\n  };\n}\n\ninterface QRUsageLog {\n  id: number;\n  tokenId: number;\n  userId: number;\n  businessUserId: number | null;\n  businessId: number | null;\n  action: 'generated' | 'scanned' | 'verified' | 'used' | 'expired';\n  tokenType: 'coupon' | 'mileage';\n  amount: number | null;\n  discountAmount: number | null;\n  governmentSupport: number | null;\n  createdAt: string;\n  user?: {\n    name: string;\n    email: string;\n  };\n  business?: {\n    businessName: string;\n  };\n}\n\ninterface CouponCreateForm {\n  userId: number;\n  couponType: 'basic' | 'event';\n  discountType: 'amount' | 'percentage';\n  discountValue: number;\n  expiresAt: string;\n}\n\nexport function QRManagementPage() {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [selectedDateRange, setSelectedDateRange] = useState('today');\n  const [showCreateCouponModal, setShowCreateCouponModal] = useState(false);\n  const [createCouponForm, setCreateCouponForm] = useState<CouponCreateForm>({\n    userId: 0,\n    couponType: 'basic',\n    discountType: 'amount',\n    discountValue: 3000,\n    expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n  });\n  \n  const queryClient = useQueryClient();\n\n  // QR Token Statistics\n  const { data: qrStats } = useQuery({\n    queryKey: ['qr-stats', selectedDateRange],\n    queryFn: async () => {\n      // Mock API call - replace with actual endpoint\n      return {\n        totalGenerated: 1234,\n        totalUsed: 987,\n        totalExpired: 123,\n        activeTokens: 124,\n        mileageUsage: 2450000,\n        couponsSaved: 1875000,\n        governmentSupport: 562500\n      };\n    }\n  });\n\n  // Active QR Tokens\n  const { data: activeTokens, isLoading: tokensLoading } = useQuery({\n    queryKey: ['qr-tokens', 'active'],\n    queryFn: async () => {\n      // Mock API call - replace with actual endpoint\n      const mockTokens: QRToken[] = [\n        {\n          id: 1,\n          userId: 123,\n          tokenType: 'mileage',\n          referenceId: null,\n          isUsed: false,\n          usedAt: null,\n          usedBusinessId: null,\n          expiresAt: new Date(Date.now() + 5 * 60 * 1000).toISOString(),\n          createdAt: new Date().toISOString(),\n          user: { id: 123, name: '김고객', email: 'customer@example.com' }\n        },\n        {\n          id: 2,\n          userId: 124,\n          tokenType: 'coupon',\n          referenceId: 456,\n          isUsed: false,\n          usedAt: null,\n          usedBusinessId: null,\n          expiresAt: new Date(Date.now() + 8 * 60 * 1000).toISOString(),\n          createdAt: new Date().toISOString(),\n          user: { id: 124, name: '이고객', email: 'customer2@example.com' }\n        }\n      ];\n      return mockTokens;\n    }\n  });\n\n  // Usage Logs\n  const { data: usageLogs, isLoading: logsLoading } = useQuery({\n    queryKey: ['qr-logs', selectedDateRange],\n    queryFn: async () => {\n      // Mock API call - replace with actual endpoint\n      const mockLogs: QRUsageLog[] = [\n        {\n          id: 1,\n          tokenId: 1,\n          userId: 123,\n          businessUserId: 789,\n          businessId: 45,\n          action: 'used',\n          tokenType: 'mileage',\n          amount: 5000,\n          discountAmount: null,\n          governmentSupport: null,\n          createdAt: new Date().toISOString(),\n          user: { name: '김고객', email: 'customer@example.com' },\n          business: { businessName: '맛있는 식당' }\n        },\n        {\n          id: 2,\n          tokenId: 2,\n          userId: 124,\n          businessUserId: 789,\n          businessId: 45,\n          action: 'used',\n          tokenType: 'coupon',\n          amount: null,\n          discountAmount: 3000,\n          governmentSupport: 1500,\n          createdAt: new Date().toISOString(),\n          user: { name: '이고객', email: 'customer2@example.com' },\n          business: { businessName: '맛있는 식당' }\n        }\n      ];\n      return mockLogs;\n    }\n  });\n\n  // Cleanup expired tokens\n  const cleanupMutation = useMutation({\n    mutationFn: async () => {\n      // Mock API call - replace with actual endpoint\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return { cleaned: 15 };\n    },\n    onSuccess: (data) => {\n      alert(`${data.cleaned}개의 만료된 토큰이 정리되었습니다.`);\n      queryClient.invalidateQueries({ queryKey: ['qr-tokens'] });\n      queryClient.invalidateQueries({ queryKey: ['qr-stats'] });\n    }\n  });\n\n  // Create coupon\n  const createCouponMutation = useMutation({\n    mutationFn: async (form: CouponCreateForm) => {\n      // Mock API call - replace with actual endpoint\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return { couponId: Math.floor(Math.random() * 1000) };\n    },\n    onSuccess: () => {\n      alert('쿠폰이 성공적으로 발급되었습니다.');\n      setShowCreateCouponModal(false);\n      setCreateCouponForm({\n        userId: 0,\n        couponType: 'basic',\n        discountType: 'amount',\n        discountValue: 3000,\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n      });\n      queryClient.invalidateQueries({ queryKey: ['qr-stats'] });\n    }\n  });\n\n  const getTokenStatusBadge = (token: QRToken) => {\n    if (token.isUsed) {\n      return <Badge variant=\"secondary\">사용완료</Badge>;\n    }\n    \n    const expiresAt = new Date(token.expiresAt);\n    const now = new Date();\n    const timeLeft = expiresAt.getTime() - now.getTime();\n    \n    if (timeLeft <= 0) {\n      return <Badge variant=\"destructive\">만료</Badge>;\n    }\n    \n    if (timeLeft <= 2 * 60 * 1000) { // 2분 이내\n      return <Badge variant=\"destructive\">곧 만료</Badge>;\n    }\n    \n    return <Badge variant=\"default\">활성</Badge>;\n  };\n\n  const getActionBadge = (action: string) => {\n    const variants = {\n      generated: 'default',\n      scanned: 'secondary',\n      verified: 'secondary',\n      used: 'default',\n      expired: 'destructive'\n    } as const;\n    \n    const labels = {\n      generated: '생성',\n      scanned: '스캔',\n      verified: '검증',\n      used: '사용',\n      expired: '만료'\n    };\n    \n    return (\n      <Badge variant={variants[action as keyof typeof variants] || 'default'}>\n        {labels[action as keyof typeof labels] || action}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 헤더 */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">QR & 쿠폰 관리</h1>\n          <p className=\"text-gray-600\">QR 코드 및 쿠폰 시스템을 관리합니다.</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Select value={selectedDateRange} onValueChange={setSelectedDateRange}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"today\">오늘</SelectItem>\n              <SelectItem value=\"week\">이번 주</SelectItem>\n              <SelectItem value=\"month\">이번 달</SelectItem>\n              <SelectItem value=\"all\">전체</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Button \n            onClick={() => setShowCreateCouponModal(true)}\n            size=\"sm\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            쿠폰 발급\n          </Button>\n          \n          <Button \n            onClick={() => cleanupMutation.mutate()}\n            variant=\"outline\"\n            size=\"sm\"\n            disabled={cleanupMutation.isPending}\n          >\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            {cleanupMutation.isPending ? '정리 중...' : '만료 토큰 정리'}\n          </Button>\n        </div>\n      </div>\n\n      {/* 통계 카드 */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">생성된 QR</CardTitle>\n            <QrCode className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{qrStats?.totalGenerated || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">총 생성 수</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">사용된 QR</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{qrStats?.totalUsed || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              사용률: {qrStats ? Math.round((qrStats.totalUsed / qrStats.totalGenerated) * 100) : 0}%\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">마일리지 사용액</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(qrStats?.mileageUsage || 0)}</div>\n            <p className=\"text-xs text-muted-foreground\">총 사용 금액</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">정부 지원금</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(qrStats?.governmentSupport || 0)}</div>\n            <p className=\"text-xs text-muted-foreground\">이벤트 쿠폰</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* 탭 컨텐츠 */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"overview\">개요</TabsTrigger>\n          <TabsTrigger value=\"tokens\">활성 QR 토큰</TabsTrigger>\n          <TabsTrigger value=\"logs\">사용 로그</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>QR 토큰 현황</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">활성 토큰</span>\n                  <span className=\"font-medium text-green-600\">{qrStats?.activeTokens || 0}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">만료 토큰</span>\n                  <span className=\"font-medium text-red-600\">{qrStats?.totalExpired || 0}</span>\n                </div>\n                <div className=\"flex items-center justify-between border-t pt-4\">\n                  <span className=\"font-medium\">총 토큰</span>\n                  <span className=\"font-bold\">{qrStats?.totalGenerated || 0}</span>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>금액 현황</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">마일리지 사용</span>\n                  <span className=\"font-medium\">{formatCurrency(qrStats?.mileageUsage || 0)}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">쿠폰 할인</span>\n                  <span className=\"font-medium\">{formatCurrency(qrStats?.couponsSaved || 0)}</span>\n                </div>\n                <div className=\"flex items-center justify-between border-t pt-4\">\n                  <span className=\"font-medium text-green-600\">정부 지원금</span>\n                  <span className=\"font-bold text-green-600\">{formatCurrency(qrStats?.governmentSupport || 0)}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"tokens\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>활성 QR 토큰 ({activeTokens?.length || 0})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {tokensLoading ? (\n                <div className=\"flex justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>토큰 ID</TableHead>\n                      <TableHead>사용자</TableHead>\n                      <TableHead>타입</TableHead>\n                      <TableHead>상태</TableHead>\n                      <TableHead>만료 시간</TableHead>\n                      <TableHead>생성일</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {activeTokens?.map((token) => (\n                      <TableRow key={token.id}>\n                        <TableCell className=\"font-mono text-sm\">#{token.id}</TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">{token.user?.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{token.user?.email}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={token.tokenType === 'mileage' ? 'secondary' : 'default'}>\n                            {token.tokenType === 'mileage' ? '마일리지' : '쿠폰'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{getTokenStatusBadge(token)}</TableCell>\n                        <TableCell className=\"text-sm\">\n                          {new Date(token.expiresAt).toLocaleString('ko-KR')}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {new Date(token.createdAt).toLocaleString('ko-KR')}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"logs\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>사용 로그 ({usageLogs?.length || 0})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {logsLoading ? (\n                <div className=\"flex justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>시간</TableHead>\n                      <TableHead>사용자</TableHead>\n                      <TableHead>액션</TableHead>\n                      <TableHead>타입</TableHead>\n                      <TableHead>금액</TableHead>\n                      <TableHead>매장</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {usageLogs?.map((log) => (\n                      <TableRow key={log.id}>\n                        <TableCell className=\"text-sm\">\n                          {new Date(log.createdAt).toLocaleString('ko-KR')}\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">{log.user?.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{log.user?.email}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>{getActionBadge(log.action)}</TableCell>\n                        <TableCell>\n                          <Badge variant={log.tokenType === 'mileage' ? 'secondary' : 'default'}>\n                            {log.tokenType === 'mileage' ? '마일리지' : '쿠폰'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {log.amount && <span className=\"text-blue-600\">{formatCurrency(log.amount)}</span>}\n                          {log.discountAmount && <span className=\"text-red-600\">{formatCurrency(log.discountAmount)}</span>}\n                          {log.governmentSupport && (\n                            <div className=\"text-sm text-green-600\">정부지원: {formatCurrency(log.governmentSupport)}</div>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {log.business?.businessName || '-'}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* 쿠폰 생성 모달 */}\n      <Dialog open={showCreateCouponModal} onOpenChange={setShowCreateCouponModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>새 쿠폰 발급</DialogTitle>\n            <DialogDescription>\n              사용자에게 쿠폰을 발급합니다.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"userId\">사용자 ID</Label>\n              <Input\n                id=\"userId\"\n                type=\"number\"\n                value={createCouponForm.userId || ''}\n                onChange={(e) => setCreateCouponForm(prev => ({\n                  ...prev,\n                  userId: parseInt(e.target.value) || 0\n                }))}\n                placeholder=\"사용자 ID를 입력하세요\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"couponType\">쿠폰 타입</Label>\n              <Select \n                value={createCouponForm.couponType} \n                onValueChange={(value: 'basic' | 'event') => \n                  setCreateCouponForm(prev => ({ ...prev, couponType: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"basic\">기본 쿠폰</SelectItem>\n                  <SelectItem value=\"event\">이벤트 쿠폰 (정부지원)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"discountType\">할인 타입</Label>\n              <Select \n                value={createCouponForm.discountType} \n                onValueChange={(value: 'amount' | 'percentage') => \n                  setCreateCouponForm(prev => ({ ...prev, discountType: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"amount\">금액 할인</SelectItem>\n                  <SelectItem value=\"percentage\">퍼센트 할인</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"discountValue\">\n                할인 값 ({createCouponForm.discountType === 'amount' ? '원' : '%'})\n              </Label>\n              <Input\n                id=\"discountValue\"\n                type=\"number\"\n                value={createCouponForm.discountValue}\n                onChange={(e) => setCreateCouponForm(prev => ({\n                  ...prev,\n                  discountValue: parseInt(e.target.value) || 0\n                }))}\n                placeholder={createCouponForm.discountType === 'amount' ? '3000' : '10'}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"expiresAt\">만료일</Label>\n              <Input\n                id=\"expiresAt\"\n                type=\"date\"\n                value={createCouponForm.expiresAt}\n                onChange={(e) => setCreateCouponForm(prev => ({\n                  ...prev,\n                  expiresAt: e.target.value\n                }))}\n              />\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowCreateCouponModal(false)}>\n              취소\n            </Button>\n            <Button \n              onClick={() => createCouponMutation.mutate(createCouponForm)}\n              disabled={createCouponMutation.isPending || !createCouponForm.userId}\n            >\n              {createCouponMutation.isPending ? '발급 중...' : '쿠폰 발급'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}